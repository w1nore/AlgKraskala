import heapq  # Для работы с приоритетной очередью

def prim(n, edges):
    """
    Алгоритм Прима для нахождения минимального остовного дерева (MST).
    :param n: Количество вершин в графе.
    :param edges: Список ребер графа в формате (вес, вершина1, вершина2).
    :return: Список ребер MST и общая стоимость дерева.
    """
    # Построим граф в виде списка смежности
    graph = {i: [] for i in range(n)}
    for weight, u, v in edges:
        graph[u].append((weight, v))
        graph[v].append((weight, u))

    # Инициализация
    visited = [False] * n  # Массив посещенных вершин
    mst = []  # Список ребер MST
    total_weight = 0  # Общая стоимость MST
    min_heap = []  # Приоритетная очередь для ребер

    # Начинаем с вершины 0 (можно выбрать любую)
    visited[0] = True
    for weight, v in graph[0]:
        heapq.heappush(min_heap, (weight, 0, v))  # Добавляем все ребра из вершины 0

    # Пока MST не построено (n-1 ребро)
    while min_heap and len(mst) < n - 1:
        weight, u, v = heapq.heappop(min_heap)  # Выбираем ребро с минимальным весом
        if not visited[v]:  # Если конечная вершина еще не была посещена
            visited[v] = True  # Помечаем вершину как посещенную
            mst.append((u, v, weight))  # Добавляем ребро в MST
            total_weight += weight  # Увеличиваем общий вес MST

            # Добавляем новые ребра, исходящие из вершины v
            for next_weight, next_v in graph[v]:
                if not visited[next_v]:
                    heapq.heappush(min_heap, (next_weight, v, next_v))

    # Если MST не удалось построить (граф несвязный)
    if len(mst) != n - 1:
        raise ValueError("Граф несвязный. Невозможно построить MST.")

    return mst, total_weight


# Пример использования:
# Список ребер графа в формате (вес, вершина1, вершина2)
edges = [
    (1, 0, 1),  # Ребро A-B с весом 1
    (3, 2, 3),  # Ребро C-D с весом 3
    (4, 1, 3),  # Ребро B-D с весом 4
    (5, 1, 2),  # Ребро B-C с весом 5
    (6, 3, 4),  # Ребро D-E с весом 6
    (7, 0, 2),  # Ребро A-C с весом 7
    (8, 2, 4),  # Ребро C-E с весом 8
]

n = 5  # Количество вершин: A, B, C, D, E

# Выполняем алгоритм Прима
mst, total_weight = prim(n, edges)

# Вывод результата
print("Минимальное остовное дерево (MST):")
for u, v, weight in mst:
    print(f"Ребро ({chr(u + 65)} - {chr(v + 65)}) с весом {weight}")
print(f"Общая стоимость MST: {total_weight}")
