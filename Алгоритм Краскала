class UnionFind:
    def __init__(self, n):
        """
        Инициализация структуры Union-Find для n элементов.
        """
        self.parent = list(range(n))  # Каждый элемент является своим родителем
        self.rank = [0] * n  # Ранги для объединения

    def find(self, i):
        """
        Находит корень множества для элемента i (с компрессией пути).
        """
        if self.parent[i] != i:
            self.parent[i] = self.find(self.parent[i])  # Компрессия пути
        return self.parent[i]

    def union(self, i, j):
        """
        Объединяет множества, содержащие элементы i и j (по рангу).
        """
        root_i = self.find(i)
        root_j = self.find(j)

        if root_i != root_j:
            if self.rank[root_i] < self.rank[root_j]:
                self.parent[root_i] = root_j
            elif self.rank[root_i] > self.rank[root_j]:
                self.parent[root_j] = root_i
            else:
                self.parent[root_j] = root_i
                self.rank[root_i] += 1
            return True
        return False


def kruskal(n, edges):
    """
    Алгоритм Краскала для нахождения MST.
    :param n: Количество вершин в графе.
    :param edges: Список ребер графа в формате (вес, вершина1, вершина2).
    :return: Список ребер MST и общая стоимость дерева.
    """
    # Сортируем ребра по весу
    edges.sort()

    # Инициализируем Union-Find для вершин графа
    uf = UnionFind(n)

    mst = []  # Ребра минимального остовного дерева
    total_weight = 0  # Общая стоимость MST

    for weight, u, v in edges:
        # Если добавление ребра не создает цикл, добавляем его в MST
        if uf.union(u, v):
            mst.append((u, v, weight))
            total_weight += weight

        # Завершаем, если MST содержит n-1 ребро
        if len(mst) == n - 1:
            break

    # Если количество ребер в MST меньше, чем n-1, граф несвязный
    if len(mst) != n - 1:
        raise ValueError("Граф несвязный. Невозможно построить MST.")

    return mst, total_weight


# Пример использования:
# Список ребер графа в формате (вес, вершина1, вершина2)
edges = [
    (1, 0, 1),  # Ребро A-B с весом 1
    (3, 2, 3),  # Ребро C-D с весом 3
    (4, 1, 3),  # Ребро B-D с весом 4
    (5, 1, 2),  # Ребро B-C с весом 5
    (6, 3, 4),  # Ребро D-E с весом 6
    (7, 0, 2),  # Ребро A-C с весом 7
    (8, 2, 4),  # Ребро C-E с весом 8
]

# Количество вершин
n = 5  # Вершины A, B, C, D, E

# Выполняем алгоритм Краскала
mst, total_weight = kruskal(n, edges)

# Вывод результата
print("Минимальное остовное дерево (MST):")
for u, v, weight in mst:
    print(f"Ребро ({chr(u + 65)} - {chr(v + 65)}) с весом {weight}")
print(f"Общая стоимость MST: {total_weight}")
